# -*- coding: utf-8 -*-
"""ДЗ7_Тоболовська Євгенія.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fF9nndcbHPONT7EY0USCaheTiXQoqvKh

Завдання 1
"""

# For this task, let's define a simple binary search tree and a function to find the maximum value.
# Please note that in a real-world scenario, you would likely use a library or a more complex implementation.

class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key

def insert(node, key):
    if node is None:
        return Node(key)
    else:
        if key < node.val:
            node.left = insert(node.left, key)
        else:
            node.right = insert(node.right, key)
    return node

def find_max(node):
    current = node
    while(current.right is not None):
        current = current.right
    return current.val

# Let's create a binary search tree
root = Node(10)
insert(root, 5)
insert(root, 1)
insert(root, 7)
insert(root, 40)
insert(root, 50)

# Now let's find the maximum value in the tree
max_value = find_max(root)
max_value

"""Завдання 2"""

def find_minimum(node):
    if node is None:
        return None
    while node.left is not None:
        node = node.left
    return node.value

"""Завдання 3"""

def find_sum(node):
    if node is None:
        return 0
    return node.value + find_sum(node.left) + find_sum(node.right)

# This function assumes that 'Node' is a class for the nodes of the tree which has attributes 'value', 'left', and 'right'.
# An example of such a class is provided below.

# class Node:
#     def __init__(self, key):
#         self.left = None
#         self.right = None
#         self.value = key

# Example usage:
# root = Node(10)
# root.left = Node(5)
# root.right = Node(15)
# root.left.left = Node(3)
# root.left.right = Node(7)
# root.right.left = Node(12)
# root.right.right = Node(18)

# print(find_sum(root)) # This would output the sum of all values in the tree.